// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int      @id @default(autoincrement())
  username  String?  @unique @db.VarChar(50)
  email     String   @unique
  password  String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pets      Pet[] // Only for regular users

  @@map("users")
}

model Vet {
  vet_id        Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(50)
  email         String          @unique
  password      String          @db.VarChar(100)
  license_id    String
  specialty     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MedicalRecord MedicalRecord[]

  @@map("vets")
}

model Trainer {
  trainer_id       Int      @id @default(autoincrement())
  username         String   @unique @db.VarChar(50)
  email            String   @unique
  password         String   @db.VarChar(100)
  certification_id String
  experience_years Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("trainers")
}

model Pet {
  pet_id            Int         @id @default(autoincrement())
  pet_name          String
  breed             String
  age               Int
  weight            Float
  pet_photo         Bytes? // Store binary data (e.g., photo)
  medical_condition String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user_id           Int? // Foreign key to User
  User              User?       @relation(fields: [user_id], references: [user_id])
  PetProfile        PetProfile?

  @@map("pets") // Optional: Maps the model to the `pets` table in the database
}

model PetProfile {
  PetProfile_id  Int      @id @default(autoincrement())
  Profile_pet_id Int      @unique // foreign key
  Pet            Pet      @relation(fields: [Profile_pet_id], references: [pet_id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  HealthTracker HealthTracker?
}

model HealthTracker {
  HealthTrackr_id Int             @id @default(autoincrement())
  h_petProfile_id Int             @unique
  PetProfile      PetProfile      @relation(fields: [h_petProfile_id], references: [PetProfile_id])
  createdAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  WeightTracking  WeightTracking?
  MedicalRecord   MedicalRecord?
  DietPlan        DietPlan?
}

model WeightTracking {
  Weight_Tracking_id Int           @id @default(autoincrement())
  health_tracker_id  Int           @unique
  HealthTracker      HealthTracker @relation(fields: [health_tracker_id], references: [HealthTrackr_id])
  Weight             Float
  date               DateTime
  createdAt          DateTime      @default(now())
  UpdatedAt          DateTime      @updatedAt
}

model MedicalRecord {
  Medical_record_id Int @id @default(autoincrement())
  health_tracker_id Int @unique

  HealthTracker HealthTracker @relation(fields: [health_tracker_id], references: [HealthTrackr_id])
  record_type   String        @db.VarChar(50)
  description   String        @db.VarChar(500)
  date          DateTime
  vet_id        Int
  Vet           Vet           @relation(fields: [vet_id], references: [vet_id])
  createdAt     DateTime      @default(now())
  UpdatedAt     DateTime      @updatedAt
}

enum Status {
  Active
  Completed
}

model DietPlan {
  diet_plan_id      Int           @id @default(autoincrement())
  health_tracker_id Int           @unique
  HealthTracker     HealthTracker @relation(fields: [health_tracker_id], references: [HealthTrackr_id])
  plan_name         String
  start_date        DateTime
  status            Status
  notes             String        @db.VarChar(500)
  createdAt         DateTime      @default(now())
  UpdatedAt         DateTime      @updatedAt
}
